1、视图接受web请求并相应
2、视图就是python中的一个函数
3、响应内容
    网页 重定向和错误视图（400错误出现在客户端     404网页匹配不成功  500服务器内部错误，在视图代码中出现错误）
            404的定义
                404视图在templates视图下定义404.html，
                request_path返回不存在的网址
                在settings里面配置DEBUG=False,ALLOWED_HOSTS = [*]

    JSON数据（ajax请求）
4、响应过程
5、url配置
    指定根级url配置文件（setting中的ROOT_URLCONF = 'project.urls'）
    urlpatterns配置，url其实有三个对象  正则表达式+视图名称+名称（用于反向解析）
        url(r'admin/',admin.site.urls,name='')
        正则表达式注意： 如果要从url获取一个值，对匹配加（）url(r'^stu/(\d+)/$',views.stupage)
                         匹配正则，前方不需要加/
                         正则前加r表示字符串不转义
    引用其他url配置：在应用中创建本项目的url.py配置自己的路由，并在工程url文件中引用
                      url(r'^',include('myApp.urls'),namespace='myApp')

6、反向代理   url(r'^',include('myApp.urls'),name='myApp')
               url(r'^addstudent/$',views.addstudent,name='page'),
              以后在网页中引用  <a href="myApp/page"></a> 这样以后修改url中的匹配规则中的字符就
              不用了重新修改网页里面的链接了,网页里这个路径会根据url配置的name和namespace动态生成
7、httprequest对象
   属性
    path  请求的完整路径，不包括域名和端口，包含参数
    method表示请求的方式GET或者POST
    encoding表示浏览器提交的数据的编码方式，一般是UTF-8
    GET 类似字典的对象，包含get请求的所有参数，主要是url里面的参数
    POST类似字典的对象，包含POST请求的所有参数，主要是表单数据
    FILES类似字典的对象，包含了所有上传的文件
    COOKIES  字典，包含所有cookies
    session  类似字典的对象，表示当前会话
   方法
    is_ajax()如果是通过XMLHTTPREUEST发起的请求，返回True
   QuertDict对象  request对象中的get、post都属于QuertDict对象
     QuertDict对象方法get（）根据键获取值和getlist（）根据键获取所有对应值，以列表的形式返回
8、HttpResponse
   1、作用：给浏览器返回数据，由程序创建
   2、返回用法： 1、不调用模板  return  HttpResponse("wzc is a good man")
          2、调用模板  return render(request,'myApp/students.html',context)
   3、对象属性
        1、content 返回内容
        2、charset  编码格式
        3、status_code    200    404   304
        4、content_type   指定输出MIME类型
   4、方法
        1、init  使用页面的内容实例化HttpResponse对象
        2、write(content)以文件的方式写入
        3、flush（）以文件的方式输出
        4、set_cookie（key,value='',max_age=none,exprise=none）
        5、delete_cookie(key)   如果删除一个不存在的key，就当什么都没发生
   5、子类
         1、HTTPResponseRedirect  重定向，服务器端跳转
            from django.http import HTTPResponseRedirect
             简写   from django.shortcuts import redirect
             redirect(视图)
         2、JSonResponse   返回json数据，一般用于返回异步请求ajax
            ——init--（self，data）  data是一个字典
            默认返回的content-type为application/json
   6、session 状态保持
          1、http协议是无状态的，每次请求都是一次新的请求，
          2、实现状态保持，在客户端或者服务端存储有关会话的数据
          3、cookies 所有的数据都存储在客户端，不要存储敏感数据，数据不安全
          4、session所有的数据都存储在服务端，在客户端用cookies存储一个session_id
          6、启用session   setting.py文件中启用
          7、启用session后，每个httprequest对象都有一个session属性，就是一个类似字典的对象
                1、get（key，default=None）获取键值
                2、clear（）清空所有会话
                3、flush（）删除当前的session，并删除会话的cookie
                4、设置session过期时间,默认为有效期半个月
                    request.session.set_expiry(value)  value为秒数
                    request.session.set_expiry(50)50秒后过期
                    request.session.set_expiry（2019-09-11 13:34:00）设置过期时间
                    request.session.set_expiry(0) 关闭浏览器时过期
                    request.session.set_expiry(None)永不过期














